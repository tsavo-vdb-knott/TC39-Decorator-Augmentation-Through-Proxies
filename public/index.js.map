{"version":3,"file":"index.js","sources":["../src/babel/legacy/decorators/simple.js","../src/babel/legacy/examples.js"],"sourcesContent":["// const initializer = function (init) { console.log(\"INIT\", this, init) }\n\n/**\n * A simple Legacy Logger Decorator, fundamentally can be a function exported as a const,\n * an anonymous arrow function also exported as a const, or an named exported function.\n * @param {number} a - this is a 1st number value.\n * @param {number} b - this is a 2nd number value.\n * @returns {void} Legacy Decorator Doesn't Return \n * For say a property decorator the legacy spec defines the an object configuration \n * with Object.defineProperty(proto, name, descriptor); \n */\nexport const logger = function () {\n  console.log(arguments);\n  // return { ...target };\n}\n\n\n","\nimport * as Simple from './decorators/simple';\nimport * as Parameters from './decorators/parameters';\n\nconst Decorators = {\n\tLegacy: {\n\t\tSimple,\n\t\tParameters\n\t}\n};\n\n// Base Class Declaration \nclass Base {\n\n\t// Simple Legacy Decorator without parameters\n\t@Decorators.Legacy.Simple.logger\n\thello = \"world\";\n\n\tconstructor() {\n\t\tconsole.log(this.hello)\n\t}\n\n};\n\nconst base = new Base();\nconsole.log(base)\n\n"],"names":["logger","console","log","arguments","Decorators","Legacy","Simple","Parameters","Base","constructor","hello","base"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMA,MAAM,GAAG,YAAY;AAChCC,EAAAA,OAAO,CAACC,GAAR,CAAYC,SAAZ,EADgC;AAGjC,CAHM;;;;;;;;;;;;ACPP,MAAMC,UAAU,GAAG;AAClBC,EAAAA,MAAM,EAAE;AACPC,IAAAA,MADO;AAEPC,IAAAA;AAFO;AADU,CAAnB;;IAQMC,eAGJJ,UAAU,CAACC,MAAX,CAAkBC,MAAlB,CAAyBN,2BAH3B,MAAMQ,IAAN,CAAW;AAEV;AAIAC,EAAAA,WAAW,GAAG;AAAA;;AACbR,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKQ,KAAjB;AACA;;AARS;;;;;WAIF;;;AAQT,MAAMC,IAAI,GAAG,IAAIH,IAAJ,EAAb;AACAP,OAAO,CAACC,GAAR,CAAYS,IAAZ"}